//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/3ClipseGame/Steam/Core/Input/PlayerInput/MovementInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MovementInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MovementInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MovementInput"",
    ""maps"": [
        {
            ""name"": ""ExploreStateActionMap"",
            ""id"": ""8a061ef1-fe18-40ab-97b8-7292b75415a3"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""eb63dac8-0c27-4702-9098-9db0d71777ed"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""0def7729-3466-407b-bec4-cb0b0520919d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""a90d34f9-30f8-4e43-af36-0a3d5d000be9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ef04a0fd-8318-4920-a0bd-0c5a7130521e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchToAnimal"",
                    ""type"": ""Button"",
                    ""id"": ""82ce1e03-2d9f-405e-a409-ec349b05eb31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""4a941e43-9324-413c-89a0-a41dd8e8f561"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8a98128f-ca43-4284-90af-43fcf9181d6d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""25daae04-4ebe-49af-982c-bf20d96647eb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f0dfdeff-5a1a-4639-87c4-78e841753328"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b5615355-ab03-4dc2-848c-c1a2320014da"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ed638d5d-cbf3-4616-82dd-d5cf9c8af26f"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f0d4885-884d-470e-ada3-cc771064a9c4"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f9d41cb-ad55-495b-aeaa-eae81d0bd466"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a95ba849-844d-44f2-9955-29b51a0397db"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToAnimal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AnimalStateActionMap"",
            ""id"": ""dd4d8f63-789e-4935-bba5-947bed5727ca"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""dc17c77a-19d3-4435-a4a5-4cd701b8b341"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchToCharacter"",
                    ""type"": ""Button"",
                    ""id"": ""ca22bd3c-a0ae-4956-af36-427e1c21e7ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""4d7cdfae-d73a-4abe-bf23-a96b4eb187b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""56dd842d-a53a-4db4-840d-49786a9e8dc3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""834c3822-4e1e-4b80-ba35-d2224735913a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""358627c6-28e0-4a0d-bdbc-328d64c57d95"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7a66b864-7906-43ea-971c-f6391ef76e78"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""249f20a0-bc07-4ff6-a7ee-9e3a0cc07655"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ad82156c-07e2-4c0e-8b69-99cfa4ac9274"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""09d60fa4-8aa5-43a1-bb54-327cd1ab06b1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""39d66387-a1c2-4dd5-a300-541721d7010b"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToCharacter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""515bdfa5-73da-4ee4-b23b-b5fe700b9a01"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40992d1f-8e68-4cc7-86d5-b8704d56388f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2a3f9d3-9836-4c14-8c98-4e0cf6dba8b2"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FightStateActionMap"",
            ""id"": ""7b0901a2-607b-4f03-9b6f-dbbd1109867e"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""91001d4e-13c3-4c24-bb58-4112a62ab8ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""253dd304-e12f-4da6-8e7a-981635c11797"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ExploreStateActionMap
        m_ExploreStateActionMap = asset.FindActionMap("ExploreStateActionMap", throwIfNotFound: true);
        m_ExploreStateActionMap_Walk = m_ExploreStateActionMap.FindAction("Walk", throwIfNotFound: true);
        m_ExploreStateActionMap_Run = m_ExploreStateActionMap.FindAction("Run", throwIfNotFound: true);
        m_ExploreStateActionMap_Crouch = m_ExploreStateActionMap.FindAction("Crouch", throwIfNotFound: true);
        m_ExploreStateActionMap_Jump = m_ExploreStateActionMap.FindAction("Jump", throwIfNotFound: true);
        m_ExploreStateActionMap_SwitchToAnimal = m_ExploreStateActionMap.FindAction("SwitchToAnimal", throwIfNotFound: true);
        // AnimalStateActionMap
        m_AnimalStateActionMap = asset.FindActionMap("AnimalStateActionMap", throwIfNotFound: true);
        m_AnimalStateActionMap_Walk = m_AnimalStateActionMap.FindAction("Walk", throwIfNotFound: true);
        m_AnimalStateActionMap_SwitchToCharacter = m_AnimalStateActionMap.FindAction("SwitchToCharacter", throwIfNotFound: true);
        m_AnimalStateActionMap_Run = m_AnimalStateActionMap.FindAction("Run", throwIfNotFound: true);
        m_AnimalStateActionMap_Jump = m_AnimalStateActionMap.FindAction("Jump", throwIfNotFound: true);
        m_AnimalStateActionMap_Crouch = m_AnimalStateActionMap.FindAction("Crouch", throwIfNotFound: true);
        // FightStateActionMap
        m_FightStateActionMap = asset.FindActionMap("FightStateActionMap", throwIfNotFound: true);
        m_FightStateActionMap_Newaction = m_FightStateActionMap.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ExploreStateActionMap
    private readonly InputActionMap m_ExploreStateActionMap;
    private IExploreStateActionMapActions m_ExploreStateActionMapActionsCallbackInterface;
    private readonly InputAction m_ExploreStateActionMap_Walk;
    private readonly InputAction m_ExploreStateActionMap_Run;
    private readonly InputAction m_ExploreStateActionMap_Crouch;
    private readonly InputAction m_ExploreStateActionMap_Jump;
    private readonly InputAction m_ExploreStateActionMap_SwitchToAnimal;
    public struct ExploreStateActionMapActions
    {
        private @MovementInput m_Wrapper;
        public ExploreStateActionMapActions(@MovementInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_ExploreStateActionMap_Walk;
        public InputAction @Run => m_Wrapper.m_ExploreStateActionMap_Run;
        public InputAction @Crouch => m_Wrapper.m_ExploreStateActionMap_Crouch;
        public InputAction @Jump => m_Wrapper.m_ExploreStateActionMap_Jump;
        public InputAction @SwitchToAnimal => m_Wrapper.m_ExploreStateActionMap_SwitchToAnimal;
        public InputActionMap Get() { return m_Wrapper.m_ExploreStateActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ExploreStateActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IExploreStateActionMapActions instance)
        {
            if (m_Wrapper.m_ExploreStateActionMapActionsCallbackInterface != null)
            {
                @Walk.started -= m_Wrapper.m_ExploreStateActionMapActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_ExploreStateActionMapActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_ExploreStateActionMapActionsCallbackInterface.OnWalk;
                @Run.started -= m_Wrapper.m_ExploreStateActionMapActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_ExploreStateActionMapActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_ExploreStateActionMapActionsCallbackInterface.OnRun;
                @Crouch.started -= m_Wrapper.m_ExploreStateActionMapActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_ExploreStateActionMapActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_ExploreStateActionMapActionsCallbackInterface.OnCrouch;
                @Jump.started -= m_Wrapper.m_ExploreStateActionMapActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_ExploreStateActionMapActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_ExploreStateActionMapActionsCallbackInterface.OnJump;
                @SwitchToAnimal.started -= m_Wrapper.m_ExploreStateActionMapActionsCallbackInterface.OnSwitchToAnimal;
                @SwitchToAnimal.performed -= m_Wrapper.m_ExploreStateActionMapActionsCallbackInterface.OnSwitchToAnimal;
                @SwitchToAnimal.canceled -= m_Wrapper.m_ExploreStateActionMapActionsCallbackInterface.OnSwitchToAnimal;
            }
            m_Wrapper.m_ExploreStateActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @SwitchToAnimal.started += instance.OnSwitchToAnimal;
                @SwitchToAnimal.performed += instance.OnSwitchToAnimal;
                @SwitchToAnimal.canceled += instance.OnSwitchToAnimal;
            }
        }
    }
    public ExploreStateActionMapActions @ExploreStateActionMap => new ExploreStateActionMapActions(this);

    // AnimalStateActionMap
    private readonly InputActionMap m_AnimalStateActionMap;
    private IAnimalStateActionMapActions m_AnimalStateActionMapActionsCallbackInterface;
    private readonly InputAction m_AnimalStateActionMap_Walk;
    private readonly InputAction m_AnimalStateActionMap_SwitchToCharacter;
    private readonly InputAction m_AnimalStateActionMap_Run;
    private readonly InputAction m_AnimalStateActionMap_Jump;
    private readonly InputAction m_AnimalStateActionMap_Crouch;
    public struct AnimalStateActionMapActions
    {
        private @MovementInput m_Wrapper;
        public AnimalStateActionMapActions(@MovementInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_AnimalStateActionMap_Walk;
        public InputAction @SwitchToCharacter => m_Wrapper.m_AnimalStateActionMap_SwitchToCharacter;
        public InputAction @Run => m_Wrapper.m_AnimalStateActionMap_Run;
        public InputAction @Jump => m_Wrapper.m_AnimalStateActionMap_Jump;
        public InputAction @Crouch => m_Wrapper.m_AnimalStateActionMap_Crouch;
        public InputActionMap Get() { return m_Wrapper.m_AnimalStateActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AnimalStateActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IAnimalStateActionMapActions instance)
        {
            if (m_Wrapper.m_AnimalStateActionMapActionsCallbackInterface != null)
            {
                @Walk.started -= m_Wrapper.m_AnimalStateActionMapActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_AnimalStateActionMapActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_AnimalStateActionMapActionsCallbackInterface.OnWalk;
                @SwitchToCharacter.started -= m_Wrapper.m_AnimalStateActionMapActionsCallbackInterface.OnSwitchToCharacter;
                @SwitchToCharacter.performed -= m_Wrapper.m_AnimalStateActionMapActionsCallbackInterface.OnSwitchToCharacter;
                @SwitchToCharacter.canceled -= m_Wrapper.m_AnimalStateActionMapActionsCallbackInterface.OnSwitchToCharacter;
                @Run.started -= m_Wrapper.m_AnimalStateActionMapActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_AnimalStateActionMapActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_AnimalStateActionMapActionsCallbackInterface.OnRun;
                @Jump.started -= m_Wrapper.m_AnimalStateActionMapActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_AnimalStateActionMapActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_AnimalStateActionMapActionsCallbackInterface.OnJump;
                @Crouch.started -= m_Wrapper.m_AnimalStateActionMapActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_AnimalStateActionMapActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_AnimalStateActionMapActionsCallbackInterface.OnCrouch;
            }
            m_Wrapper.m_AnimalStateActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @SwitchToCharacter.started += instance.OnSwitchToCharacter;
                @SwitchToCharacter.performed += instance.OnSwitchToCharacter;
                @SwitchToCharacter.canceled += instance.OnSwitchToCharacter;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
            }
        }
    }
    public AnimalStateActionMapActions @AnimalStateActionMap => new AnimalStateActionMapActions(this);

    // FightStateActionMap
    private readonly InputActionMap m_FightStateActionMap;
    private IFightStateActionMapActions m_FightStateActionMapActionsCallbackInterface;
    private readonly InputAction m_FightStateActionMap_Newaction;
    public struct FightStateActionMapActions
    {
        private @MovementInput m_Wrapper;
        public FightStateActionMapActions(@MovementInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_FightStateActionMap_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_FightStateActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FightStateActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IFightStateActionMapActions instance)
        {
            if (m_Wrapper.m_FightStateActionMapActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_FightStateActionMapActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_FightStateActionMapActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_FightStateActionMapActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_FightStateActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public FightStateActionMapActions @FightStateActionMap => new FightStateActionMapActions(this);
    public interface IExploreStateActionMapActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSwitchToAnimal(InputAction.CallbackContext context);
    }
    public interface IAnimalStateActionMapActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnSwitchToCharacter(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
    }
    public interface IFightStateActionMapActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
