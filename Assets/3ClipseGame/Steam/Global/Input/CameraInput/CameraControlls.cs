//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/3ClipseGame/Steam/Entities/Player/Camera/CameraControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraControlls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraControlls"",
    ""maps"": [
        {
            ""name"": ""MouseMap"",
            ""id"": ""75a79b73-2365-4638-8489-82c4825dc18f"",
            ""actions"": [
                {
                    ""name"": ""CameraControlHorizontal"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ed10cd2e-4e24-4886-8563-5cbe3eafbd06"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone(min=0.8,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraControlVertical"",
                    ""type"": ""Button"",
                    ""id"": ""39a8b90d-42e5-4220-8030-95c265c0caac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4b9f9d8c-871c-456e-87e1-69cae1c38d04"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(min=0.2,max=1)"",
                    ""groups"": """",
                    ""action"": ""CameraControlHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d361933f-51f4-4bd4-845b-d41228e02030"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraControlVertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MouseMap
        m_MouseMap = asset.FindActionMap("MouseMap", throwIfNotFound: true);
        m_MouseMap_CameraControlHorizontal = m_MouseMap.FindAction("CameraControlHorizontal", throwIfNotFound: true);
        m_MouseMap_CameraControlVertical = m_MouseMap.FindAction("CameraControlVertical", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MouseMap
    private readonly InputActionMap m_MouseMap;
    private IMouseMapActions m_MouseMapActionsCallbackInterface;
    private readonly InputAction m_MouseMap_CameraControlHorizontal;
    private readonly InputAction m_MouseMap_CameraControlVertical;
    public struct MouseMapActions
    {
        private @CameraControlls m_Wrapper;
        public MouseMapActions(@CameraControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraControlHorizontal => m_Wrapper.m_MouseMap_CameraControlHorizontal;
        public InputAction @CameraControlVertical => m_Wrapper.m_MouseMap_CameraControlVertical;
        public InputActionMap Get() { return m_Wrapper.m_MouseMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseMapActions set) { return set.Get(); }
        public void SetCallbacks(IMouseMapActions instance)
        {
            if (m_Wrapper.m_MouseMapActionsCallbackInterface != null)
            {
                @CameraControlHorizontal.started -= m_Wrapper.m_MouseMapActionsCallbackInterface.OnCameraControlHorizontal;
                @CameraControlHorizontal.performed -= m_Wrapper.m_MouseMapActionsCallbackInterface.OnCameraControlHorizontal;
                @CameraControlHorizontal.canceled -= m_Wrapper.m_MouseMapActionsCallbackInterface.OnCameraControlHorizontal;
                @CameraControlVertical.started -= m_Wrapper.m_MouseMapActionsCallbackInterface.OnCameraControlVertical;
                @CameraControlVertical.performed -= m_Wrapper.m_MouseMapActionsCallbackInterface.OnCameraControlVertical;
                @CameraControlVertical.canceled -= m_Wrapper.m_MouseMapActionsCallbackInterface.OnCameraControlVertical;
            }
            m_Wrapper.m_MouseMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CameraControlHorizontal.started += instance.OnCameraControlHorizontal;
                @CameraControlHorizontal.performed += instance.OnCameraControlHorizontal;
                @CameraControlHorizontal.canceled += instance.OnCameraControlHorizontal;
                @CameraControlVertical.started += instance.OnCameraControlVertical;
                @CameraControlVertical.performed += instance.OnCameraControlVertical;
                @CameraControlVertical.canceled += instance.OnCameraControlVertical;
            }
        }
    }
    public MouseMapActions @MouseMap => new MouseMapActions(this);
    public interface IMouseMapActions
    {
        void OnCameraControlHorizontal(InputAction.CallbackContext context);
        void OnCameraControlVertical(InputAction.CallbackContext context);
    }
}
